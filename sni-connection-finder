#!/bin/bash

if [ -z "$1" ] ; then
	echo "Usage: $(basename ${0}) [SNI] [...SNI]"
	exit 1
fi

clear

G1="\033[32;1m"
Y1="\033[33;1m"
R1="\033[31;1m"
CC="\033[0m"

log () {
	echo -e "${1}${*:2}${CC}"
}

log $G1 "Server Name Indication Connection Finder"
log $G1 "(c) 2020 Aztec Rabbit."
log

dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
sni_scanner="${dir}/sni-scanner"

if [ ! -f "$sni_scanner" ] ; then

	arch="$(uname -m)"

	case "$arch" in
		"x86_64" )
			sni_scanner_arch="linux-amd64"
			;;

		"armv8l" | "aarch64" )
			sni_scanner_arch="linux-arm64"
			;;

		"armv7l" )
			sni_scanner_arch="linux-arm"
			;;

		* )
			log $R1 "Architecture \"$arch\" not found!"
			log
			exit 1
			;;
	esac

	wget="$(command -v wget)"

	if [ -z "$wget" ] ; then
		log $R1 "Please install wget first!"
		log

		exit 1
	fi

	log $G1 "Downloading sni-scanner using wget ..."
	log

	$wget -O "$sni_scanner" "https://raw.githubusercontent.com/aztecrabbit/sni-connection-finder/sni-scanner-bin/sni-scanner-${sni_scanner_arch}"

	if [ "$?" != "0" ] ; then
		log $R1 "Not downloaded!"
		log

		rm -f "$sni_scanner"

		exit 1

	else
		log $G1 "Downloaded"
		log

	fi

fi

chmod +x "$sni_scanner" 2>/dev/null

"$sni_scanner" 2>/dev/null

if [ "$?" != "1" ] ; then
	log $R1 "Executing sni-scanner error!"
	log

	exit 1
fi

is_android="$([ ! -f "/etc/os-release" ] && echo True)"

while true ; do
	for sni in "${@}" ; do
		while true ; do
			log $G1 "Connecting using $sni ..."

			result="$("$sni_scanner" "$sni" 2>&1)"

			if [ "$(echo $result | grep "network is unreachable")" ] ; then
				sleep 2.500
				continue
			fi

			break
		done

		if [ "$result" = "True" ] ; then
			log $Y1 "Connected"
			log

			ifconfig 2>/dev/null | grep "inet 10." | awk '{ print $2 }' | {
				i="0"

				while read ip ; do
					log $G1 "Current IP $ip"

					i="$((i+1))"
				done

				if [ "$i" -ge "1" ] ; then
					echo
				fi
			}

			exit 0
		fi
	done

	echo

	if [ "$is_android" ] ; then
		if su -c echo >/dev/null 2>&1 ; then

			su -c settings put global airplane_mode_on 1
			su -c am broadcast -a android.intent.action.AIRPLANE_MODE >/dev/null

			su -c settings put global airplane_mode_on 0
			su -c am broadcast -a android.intent.action.AIRPLANE_MODE >/dev/null

		else
			log $R1 "Enable Disable Airplane Mode Now!"
			log

			sleep 7.500

		fi

	fi

	reconnect_data="${dir}/reconnect_data"

	if [ -f "$reconnect_data" ] ; then
		chmod +x "$reconnect_data"

		"$reconnect_data"
	fi

done
